import { createRouter, createWebHistory } from 'vue-router'
import jwt_decode from 'jwt-decode'
import Login from '@/Login.vue'

// import routes ‡∏à‡∏≤‡∏Å role ‡∏ï‡πà‡∏≤‡∏á‡πÜ
import studentRoutes from './student'
import secretaryRoutes from './secretary'
import adminRoutes from './admin'

const routes = [
  { path: '/', redirect: '/login' },
  { path: '/login', name: 'Login', component: Login },
  ...studentRoutes,
  ...secretaryRoutes,
  ...adminRoutes
]

const router = createRouter({
  history: createWebHistory(),
  routes
})


//-------------------------------- Navigation Guard ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î --------------------------------
router.beforeEach((to, from, next) => {
  const token = localStorage.getItem('authToken')
  const role = localStorage.getItem('userRole')

  // üïí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  if (token) {
    try {
      const decoded = jwt_decode(token)
      const now = Date.now() / 1000 // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

      if (decoded.exp && decoded.exp < now) {
        // ‚ùå ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
        localStorage.removeItem('authToken')
        localStorage.removeItem('userRole')
        return next({ name: 'Login' })
      }
    } catch (err) {
      console.error('Token decode error:', err)
      localStorage.removeItem('authToken')
      localStorage.removeItem('userRole')
      return next({ name: 'Login' })
    }
  }

  // üß± ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ requireAuth ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ login
  if (!token && to.meta.requiresAuth) {
    return next({ name: 'Login' })
  }

  // üîí ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ page ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà login
  if (!role && to.name !== 'Login') {
    return next({ name: 'Login' })
  }

  // üö´ ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ /login ‡∏ã‡πâ‡∏≥
  if (role && to.name === 'Login') {
    if (role == 3) return next({ name: 'PathSelect' })
    if (role == 2) return next({ name: 'Appointment' })
    if (role == 1) return next({ name: 'Dashboard' })
    return next('/')
  }

  next()
})


export default router
